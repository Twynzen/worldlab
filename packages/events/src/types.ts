// Core event system types based on investigation

// Event payload definitions with strong typing
export interface EventMap {
  // Physics events
  'collision:enter': {
    entityA: number;
    entityB: number;
    contactPoint: { x: number; y: number; z: number };
    force: number;
  };
  'collision:exit': {
    entityA: number;
    entityB: number;
  };

  // Entity lifecycle events
  'entity:spawned': {
    entityId: number;
    archetype: string;
    position: { x: number; y: number; z: number };
  };
  'entity:destroyed': {
    entityId: number;
  };

  // World generation events
  'chunk:generated': {
    chunkCoord: { x: number; z: number };
    heightmap: Float32Array;
    biomemap: Uint8Array;
    objects: any[];
  };
  'chunk:unloaded': {
    chunkCoord: { x: number; z: number };
  };

  // Player events
  'player:moved': {
    playerId: number;
    position: { x: number; y: number; z: number };
    velocity: { x: number; y: number; z: number };
  };
  'player:damaged': {
    playerId: number;
    damage: number;
    source: string;
  };

  // Command events
  'command:executed': {
    commandId: string;
    command: Command;
    success: boolean;
    timestamp: number;
  };
  'command:failed': {
    commandId: string;
    command: Command;
    error: string;
    timestamp: number;
  };
}

export type EventKey = keyof EventMap;
export type EventHandler<K extends EventKey> = (payload: EventMap[K]) => void;

// Command system types based on JSON DSL investigation
export interface Command {
  action: string;
  [key: string]: any;
}

export interface SpawnCommand extends Command {
  action: 'spawn';
  entity: string;
  position: {
    x?: number;
    y?: number;
    z?: number;
    near?: string;
    radius?: number;
  };
  properties?: {
    scale?: number;
    rotation?: { x: number; y: number; z: number };
    [key: string]: any;
  };
}

export interface ModifyCommand extends Command {
  action: 'modify';
  target: {
    type: 'entity' | 'chunk' | 'world';
    id?: number | string;
    selector?: string;
  };
  changes: {
    [property: string]: any;
  };
}

export interface MoveCommand extends Command {
  action: 'move';
  entityId: number;
  destination: { x: number; y: number; z: number };
  speed?: number;
}

// Validation types based on Chain of Responsibility investigation
export interface ValidationResult {
  isValid: boolean;
  errors: ValidationError[];
  warnings: ValidationWarning[];
  suggestions?: string[];
}

export interface ValidationError {
  code: string;
  message: string;
  field?: string;
  severity: 'error' | 'warning';
}

export interface ValidationWarning {
  code: string;
  message: string;
  suggestion?: string;
}

export interface CommandHandler {
  execute(command: Command): Promise<void> | void;
}

export interface CommandValidator {
  validate(command: Command, context?: GameContext): ValidationResult;
}

// Game context for validation
export interface GameContext {
  playerPosition: { x: number; y: number; z: number };
  nearbyEntities: Array<{ id: number; type: string; position: { x: number; y: number; z: number } }>;
  currentChunk: { x: number; z: number };
  worldBounds: { min: { x: number; z: number }; max: { x: number; z: number } };
  resources: {
    entityCount: number;
    maxEntities: number;
    memoryUsage: number;
    maxMemory: number;
  };
}

// Event Sourcing types
export interface EventRecord {
  eventId: string;
  eventType: EventKey;
  payload: any;
  timestamp: number;
  causedBy?: string; // Parent event ID for causality tracking
  metadata?: {
    source: string;
    traceId?: string;
    [key: string]: any;
  };
}

export interface CommandRecord {
  commandId: string;
  command: Command;
  timestamp: number;
  status: 'pending' | 'executing' | 'completed' | 'failed';
  result?: any;
  error?: string;
  events: string[]; // IDs of events generated by this command
}